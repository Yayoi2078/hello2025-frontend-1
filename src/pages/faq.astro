---
import * as crypto from "crypto";
import remarkParse from "remark-parse";
import { unified } from "unified";
import { fetchPost } from "../esa-utils/fetch";
import { parseFaqs } from "../esa-utils/faq-parser";
import Layout from "../layouts/Layout.astro";
import Footer from "../components/footer.astro";
import Header from "../components/Header.astro";

const faqPost = await fetchPost(import.meta.env.ESA_FAQ_NUMBER);
const faqNodes = unified().use(remarkParse).parse(faqPost.body_md);
const faqs = parseFaqs(faqNodes);
console.dir(faqs);

const hashes = faqs.map((faq) =>
  crypto.createHash("md5").update(faq.question).digest("hex"),
);
let hashLength = 7;
while (
  new Set(hashes.map((h) => h.slice(0, hashLength))).size !== hashes.length
) {
  hashLength++;
}
console.log("assured unique id w/hashLength: ", hashLength);
const ids = hashes.map((h) => h.slice(0, hashLength));
---

<Layout pageTitle="よくある質問">
  <div class="container">
    <Header />
    <div class="article-container">
      <h1 class="title">よくある質問</h1>
      <nav class="toc-nav">
        <h2 class="toc-title">目次</h2>
        <div class="toc"></div>
      </nav>
      <article>
        {
          faqs.map((faq, i) => (
            <div class="faq-item">
              <h2 class="question" id={ids[i]}>
                {faq.question}
              </h2>
              <div set:html={faq.answerHtml} />
            </div>
          ))
        }
      </article>
    </div>
  </div>

  <script>
    import * as tocbot from "tocbot";

    tocbot.init({
      tocSelector: ".toc", // 目次を追加するクラス名
      contentSelector: "article", // 目次を取得するコンテンツ
      activeLinkClass: "to-link-active", // アクティブになった時のクラス名
      listClass: "toc-list", // olのクラス名
      linkClass: "toc-link", // aタグのクラス名
      headingSelector: "h2, h3", // 目次として取得する見出しタグ
    });
  </script>

  <Footer showTopLink={true} />
</Layout>

<style>
  .title {
    font-size: 2rem;
    padding-inline: 16px;
    border-inline-start: 11px solid var(--theme-color-dark);
    border-block-end: 1px solid var(--border-color);
  }
  .toc-nav {
    padding: 16px;
    border: solid 1px var(--border-color);
    border-radius: 8px;
    width: fit-content;
  }
  .toc-title {
    margin: 0;
    font-size: 1.2rem;
  }
  .toc {
    ol {
      padding-inline-start: 24px;
    }
    ol ol {
      padding-inline-start: 16px;
    }
    li {
      color: var(--link-color);
      font-weight: 700;
    }
    ol ol > li {
      font-weight: normal;
    }
    a {
      font-size: 1rem;
      color: var(--link-color);
      text-decoration: none;
    }
    a:hover {
      color: var(--text-color);
    }
  }
  .container {
    width: 620px;
    margin: 8px auto;
    counter-reset: number 0;
  }
  .article-container {
    padding: 16px;
  }
  .faq-item {
    padding: 0.5em 1em;
    margin: 2em 0;
    background: #fff;
    border: solid 3px #60d398; /*線*/
    border-radius: 10px; /*角の丸み*/
  }
  .question {
    font-size: 1.3rem;
    font-weight: bold;
  }
  .question::before {
    counter-increment: number 1;
    content: "Q" counter(number) ".";
  }
  @media screen and (max-width: 768px) {
    .faq-item {
      width: 100%;
    }
    dd {
      margin-left: 8px;
    }
    .container {
      width: 100%;
    }
  }
</style>
