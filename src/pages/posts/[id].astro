---
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import rehypeSlug from "rehype-slug";
import remarkRehype from "remark-rehype";
import rehypeStringify from "rehype-stringify";
import { unified } from "unified";
import { fetchPosts } from "../../esa-utils/fetch";
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/footer.astro";
import { imageReplacer } from "../../esa-utils/image-replacer";
import Header from "../../components/Header.astro";

/**
 * 動的にページを生成するときに必須の関数
 *
 * @see https://docs.astro.build/ja/reference/routing-reference/#getstaticpaths
 */
export async function getStaticPaths() {
  const response = await fetchPosts();
  const posts = response.posts;
  const blogPosts = posts.filter(
    (post) => post.number !== import.meta.env.ESA_FAQ_NUMBER,
  );
  const paths = blogPosts.map((post) => ({
    params: { id: post.number },
    props: { post: post },
  }));
  return paths;
}
const { post } = Astro.props;
const articleHtml = await unified()
  .use(remarkParse)
  .use(remarkGfm)
  .use(remarkRehype, { allowDangerousHtml: true })
  .use(rehypeSlug)
  .use(imageReplacer)
  .use(rehypeStringify, { allowDangerousHtml: true })
  .process(post.body_md);
---

<Layout pageTitle={post.name} jsonld={{ attype: "Article" }}>
  <div class="container">
    <Header />
    <div class="article-container">
      <h1 class="title">{post.name}</h1>
      <nav class="toc-nav">
        <h2 class="toc-title">目次</h2>
        <div class="toc"></div>
      </nav>

      <article set:html={articleHtml.toString()} />
      <Footer />
    </div>
  </div>

  <script>
    import * as tocbot from "tocbot";

    tocbot.init({
      tocSelector: ".toc", // 目次を追加するクラス名
      contentSelector: "article", // 目次を取得するコンテンツ
      activeLinkClass: "to-link-active", // アクティブになった時のクラス名
      listClass: "toc-list", // olのクラス名
      linkClass: "toc-link", // aタグのクラス名
      headingSelector: "h2, h3", // 目次として取得する見出しタグ
    });
  </script>
</Layout>

<style>
  .title {
    font-size: 2rem;
    padding-inline: 11px;
    padding-block: 0.1rem;
    border-inline-start: 11px solid var(--theme-color-dark);
    border-block-end: 1px solid var(--border-color);
  }
  .toc-nav {
    padding: 16px;
    border: solid 1px var(--border-color);
    border-radius: 8px;
    width: fit-content;
  }
  .toc-title {
    margin: 0;
    font-size: 1.2rem;
    border: 0;
  }
  .toc {
    ol {
      padding-inline-start: 0;
    }
    ol ol {
      padding-inline-start: 16px;
    }
    li {
      list-style-type: none;
      color: var(--link-color);
      font-weight: 700;
    }
    ol ol > li {
      font-weight: normal;
    }
    a {
      font-size: 1rem;
      color: var(--link-color);
      text-decoration: none;
    }
    a:hover {
      color: var(--text-color);
    }
  }
  .container {
    width: 620px;
    margin: 8px auto;
    overflow-wrap: break-word;
  }
  .article-container {
    padding: 16px;
  }
  @media screen and (max-width: 768px) {
    .container {
      width: 100%;
    }
    .toc-nav {
      width: 100%;
    }
    .container {
      width: 100%;
    }
  }
</style>

<style is:inline>
  img {
    max-width: 100%;
    max-height: 30rem;
    display: block;
    margin: 8px 0;
  }
  h1 {
    font-size: 2rem;
  }
  h2 {
    border-inline-start: 7px solid var(--theme-color);
    padding-inline-start: 11px;
    padding-block: 0.1rem;
    border-block-end: 1px solid var(--border-color);
  }
  h3 {
    border-block-end: 1px solid var(--border-color);
  }
  table,
  th,
  td {
    margin: 0;
    border-spacing: 0;
  }
  th,
  td {
    border-inline-start: 1px solid var(--border-color);
    border-block-start: 1px solid var(--border-color);
  }
  th:last-of-type,
  td:last-of-type {
    border-inline-end: 1px solid var(--border-color);
  }
  tr:last-of-type {
    td {
      border-block-end: 1px solid var(--border-color);
    }
  }
</style>
