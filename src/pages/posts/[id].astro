---
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import rehypeSlug from "rehype-slug";
import remarkRehype from "remark-rehype";
import rehypeStringify from "rehype-stringify";
import { unified } from "unified";
import { fetchPosts } from "../../esa-utils/fetch";
import Layout from "../../layouts/Layout.astro";
import { imageReplacer } from "../../esa-utils/image-replacer";
import StyledHtml from "../../components/StyledHtml.astro";
import Toc from "../../components/Toc.astro";
import { detailsContentMarker } from "../../esa-utils/details-content-marker";
import { externalLinkReplacer } from "../../esa-utils/external-link-replacer";

/**
 * 動的にページを生成するときに必須の関数
 *
 * @see https://docs.astro.build/ja/reference/routing-reference/#getstaticpaths
 */
export async function getStaticPaths() {
  const response = await fetchPosts();
  const posts = response.posts;
  const blogPosts = posts.filter(
    (post) => post.number !== import.meta.env.ESA_FAQ_NUMBER,
  );
  const paths = blogPosts.map((post) => ({
    params: { id: post.number },
    props: { post: post },
  }));
  return paths;
}
const { post } = Astro.props;
const articleHtml = await unified()
  .use(remarkParse)
  .use(remarkGfm)
  .use(remarkRehype, { allowDangerousHtml: true })
  .use(rehypeSlug)
  .use(imageReplacer)
  .use(externalLinkReplacer)
  .use(detailsContentMarker)
  .use(rehypeStringify, { allowDangerousHtml: true })
  .process(post.body_md);
---

<Layout pageTitle={post.name} jsonld={{ attype: "Article" }}>
  <h1 class="title">{post.name}</h1>
  <Toc />
  <article>
    <StyledHtml html={articleHtml.toString()} />
  </article>
</Layout>

<style>
  .title {
    font-size: 2rem;
    padding-inline: 11px;
    padding-block: 0.1rem;
    border-inline-start: 11px solid var(--theme-color-accent);
    border-block-end: 1px solid var(--border-color);
  }
</style>
